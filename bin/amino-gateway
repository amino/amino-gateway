#!/usr/bin/env node

function list (str) {
  return str.split(/ *, */).map(function (val) {
    return val.match(/^\d+$/) ? parseInt(val, 10) : val;
  });
}

process.title = 'amino-gateway';

var program = require('commander')
  .version(require(require('path').join(__dirname, '../package.json')).version)
  .option('-p, --port <port>', 'port to listen on (default: 8080)', Number, 8080)
  .option('-s, --service <name[@version]>', 'amino service to proxy to, with optional semver (default: app)', 'app')
  .option('-t, --threads <num>', 'number of threads to use (default: CPU count)', Number, require('os').cpus().length)
  .option('-r, --redis <port/host/host:port/list>', 'redis server(s) used by amino service (can be comma-separated)', list)
  .option('--stickyQuery <name>', 'name of a GET variable to base sticky sessions on')
  .option('--stickyIp', 'enable sticky sessions based on remote IP address')
  .option('--stickyCookie <cookie name>', 'name of a cookie to base sticky sessions on')
  .option('--setuid <uid|username>', '(POSIX, requires root) run under this uid (or username)')
  .option('--setgid <gid|groupname>', '(POSIX, requires root) run under this gid (or groupname)')
  .option('--maintMode', 'start in maintenance mode. (alternatively send SIGUSR2 to toggle maintenance mode)')
  .option('--maintPage <path>', 'path to an html file to be served when maintenance mode is enabled')
  .option('--maintIps <ips>', 'comma-separated list of IP addresses able to bypass maintenance mode', list)
  .option('--tls <options>', 'comma-separated list of tls options. pfx, key, cert and ca are supposed to be file paths', list)
  .parse(process.argv)

var amino = require('amino')
    .use(require('../'), program)
    .init({
      redis: program.redis,
      service: false
    })
  , cluster = require('cluster')

if (cluster.isMaster) {
  // Fork workers.
  for (var i = 0; i < program.threads; i++) {
    cluster.fork();
  }

  cluster.on('disconnect', function (worker) {
    console.error('worker ' + worker.process.pid + ' disconnected. killing...');
    worker.kill();
  });
  cluster.on('exit', function (worker, code, signal) {
    var exitCode = worker.process.exitCode;
    console.error('worker ' + worker.process.pid + ' died (' + exitCode + '). restarting...');
    cluster.fork();
  });

  console.log(program.service + ' gateway listening (' + (program.threads > 1 ? program.threads + ' threads' : 'single thread') + ') on port ' + program.port + '...');

  process.on('SIGUSR2', function () {
    program.maintMode = !program.maintMode;
    for (var id in cluster.workers) {
      cluster.workers[id].process.kill('SIGUSR2');
    }
    console.error('Maintenance mode', program.maintMode ? 'on' : 'off');
  });

  cluster.on('fork', function (worker) {
    function sendMaintMode (msg) {
      if (msg === 'maintMode') {
        worker.send('maintMode:' + (program.maintMode ? 'on' : 'off'));
        worker.removeListener('message', sendMaintMode);
      }
    }
    worker.on('message', sendMaintMode);
  });

  if (program.maintMode) {
    console.error('Maintenance mode on');
  }
}
else {
  process.on('SIGUSR2', function () {
    program.maintMode = !program.maintMode;
  });

  // Get the current maintenance mode from cluster master before start
  function getMaintMode (msg) {
    var parts = msg.split(':');
    if (parts[0] === 'maintMode') {
      program.maintMode = parts[1] === 'on';
      var server = amino.createGateway(program);
      server.on('error', function (err) {
        console.error(err, 'server error');
      });
      server.on('listening', function () {
        if (program.setgid) {
          process.setgid(program.setgid);
        }
        if (program.setuid) {
          process.setuid(program.setuid);
        }
      });
      server.listen(program.port);
      process.removeListener('message', getMaintMode);
    }
  }
  process.on('message', getMaintMode);
  process.send('maintMode');

  process.title = 'amino-gateway (worker)';
}
